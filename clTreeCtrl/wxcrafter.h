//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#ifndef _CLTREECTRL_CLTREECTRL_WXCRAFTER_BASE_CLASSES_H
#define _CLTREECTRL_CLTREECTRL_WXCRAFTER_BASE_CLASSES_H

#include <map>
#include <wx/artprov.h>
#include <wx/bitmap.h>
#include <wx/frame.h>
#include <wx/icon.h>
#include <wx/iconbndl.h>
#include <wx/imaglist.h>
#include <wx/menu.h>
#include <wx/panel.h>
#include <wx/settings.h>
#include <wx/sizer.h>
#include <wx/textctrl.h>
#include <wx/xrc/xh_bmp.h>
#include <wx/xrc/xmlres.h>
#if wxVERSION_NUMBER >= 2900
#include <wx/persist.h>
#include <wx/persist/bookctrl.h>
#include <wx/persist/toplevel.h>
#include <wx/persist/treebook.h>
#endif

#ifdef WXC_FROM_DIP
#undef WXC_FROM_DIP
#endif
#if wxVERSION_NUMBER >= 3100
#define WXC_FROM_DIP(x) wxWindow::FromDIP(x, NULL)
#else
#define WXC_FROM_DIP(x) x
#endif

class MainFrameBaseClass : public wxFrame
{
public:
    enum {
        ID_THEME_CHOOSE = 10001,
        ID_ZEBRA_COLOURING = 10002,
        ID_PREV_SIBLING = 10003,
        ID_NEXT_SIBLING = 10004,
        ID_SELECT_CHILDREN = 10005,
        ID_HIDE_ROOT = 10006,
        ID_EXPAND_ALL = 10007,
        ID_OPEN_FOLDER = 10008,
    };

protected:
    wxPanel* m_mainPanel;
    wxTextCtrl* m_textCtrlLog;
    wxMenuBar* m_menuBar;
    wxMenu* File;
    wxMenuItem* m_menuItem13;
    wxMenuItem* m_separator1;
    wxMenuItem* m_menuItemExpandAll;
    wxMenuItem* m_menuItemCollapseAll;
    wxMenuItem* m_menuItemFirstVisible;
    wxMenuItem* m_menuItemNextVisibleItem;
    wxMenuItem* m_menuItemEnsureVisible;
    wxMenuItem* m_menuItemSelectChildren;
    wxMenuItem* m_menuItemNextSibling;
    wxMenuItem* m_menuItemPrevSibling;
    wxMenuItem* m_separator2;
    wxMenuItem* m_menuItemExit;
    wxMenu* Styles;
    wxMenuItem* m_menuItemRowLines;
    wxMenuItem* m_menuItemTheme;
    wxMenuItem* m_menuItemHideRoot;

protected:
    virtual void OnOpenFolder(wxCommandEvent& event) { event.Skip(); }
    virtual void OnExpandAll(wxCommandEvent& event) { event.Skip(); }
    virtual void OnCollapseAll(wxCommandEvent& event) { event.Skip(); }
    virtual void OnFirstVisible(wxCommandEvent& event) { event.Skip(); }
    virtual void OnNextVisible(wxCommandEvent& event) { event.Skip(); }
    virtual void OnEnsureItemVisible(wxCommandEvent& event) { event.Skip(); }
    virtual void OnSelectChildren(wxCommandEvent& event) { event.Skip(); }
    virtual void OnNextSibling(wxCommandEvent& event) { event.Skip(); }
    virtual void OnPrevSibling(wxCommandEvent& event) { event.Skip(); }
    virtual void OnExit(wxCommandEvent& event) { event.Skip(); }
    virtual void OnZebraColouring(wxCommandEvent& event) { event.Skip(); }
    virtual void OnToggleTheme(wxCommandEvent& event) { event.Skip(); }
    virtual void OnHideRoot(wxCommandEvent& event) { event.Skip(); }

public:
    wxTextCtrl* GetTextCtrlLog() { return m_textCtrlLog; }
    wxPanel* GetMainPanel() { return m_mainPanel; }
    wxMenuBar* GetMenuBar() { return m_menuBar; }
    MainFrameBaseClass(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("My Frame"),
        const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1, -1),
        long style = wxCAPTION | wxRESIZE_BORDER | wxMAXIMIZE_BOX | wxMINIMIZE_BOX | wxSYSTEM_MENU | wxCLOSE_BOX);
    virtual ~MainFrameBaseClass();
};

class MyImages : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    MyImages();
    const wxBitmap& Bitmap(const wxString& name) const
    {
        if(!m_bitmaps.count(name + m_resolution)) return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString) { m_resolution = res; }

    virtual ~MyImages();
};

#endif
